/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bricks;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.SwingUtilities;
import javax.swing.Timer;


/** *
 * 
 */
public class Game extends javax.swing.JFrame implements KeyListener {
    public JLabel platform;
    public int platformX;
    public int count=0;
    public ArrayList<Brick> bricks;
    private BallPanel bp;
    public int plx=513;
    public Game() {
        initComponents();
        this.bp=new BallPanel(this);
        this.bp.setVisible(true);
        //this.bp= bp;
        this.platformX=413;
        this.setSize(1026,630);      
        
        Path resourceDirectory = Paths.get("src","resources");
        String absolutePath = resourceDirectory.toFile().getAbsolutePath();
        Image bgimg = new ImageIcon(absolutePath+"/bgImage.PNG").getImage();
        bp.setBounds(0,0, 1026,630);
        this.bricks = new  ArrayList<Brick>();
     
        bp.setLayout(null);
        for(int i = 0; i<30;i++) {
            Brick br= new Brick(10+(i%10)*100,(i/10)*60);
            this.bricks.add(br);  
        }
        this.Draw();
        getContentPane().add(bp);      
       addKeyListener(this);       

    }
    
    public void Draw(){
        this.bp.removeAll();
        Path resourceDirectory = Paths.get("src","resources");
        String absolutePath = resourceDirectory.toFile().getAbsolutePath();
        for(int i = 0; i<this.bricks.size();i++){
            if(this.bricks.get(i).broken==false){
                JLabel b = new JLabel(new ImageIcon(absolutePath+"/br"+(i%3)+".PNG"));
                b.setBounds(this.bricks.get(i).r.x, this.bricks.get(i).r.y, this.bricks.get(i).r.width, this.bricks.get(i).r.height);
                this.bp.add(b);
            }
        }
        platform = new JLabel(new ImageIcon(getClass().getResource("/resources/platform.PNG")));
        
            platform.setBounds(this.platformX, 550, 200, 40);
        this.bp.add(platform);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1009, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public static void main(String args[]) {
         SwingUtilities.invokeLater(() -> {
        JFrame frame = new JFrame("Bouncing Ball");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Game game = new Game();
        game.setVisible(true);
    });
    }

     
    @Override
    public void keyTyped(KeyEvent e) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


    @Override
    public void keyPressed(KeyEvent e) {
        int key=e.getKeyCode();
         if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (platformX >= 1026) {
                platformX = 1026;
            } else {
                movePlatformRight();
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (platformX < 0) {
                platformX = 0;
            } else {
                movePlatformLeft();
            }
        }
    }

    private void movePlatformLeft(){
        this.platformX-= 20;
        platform.setLocation(this.platformX,platform.getY());
        
    }
    
     private void movePlatformRight(){
        this.platformX+= 20;
        platform.setLocation(this.platformX, platform.getY());
    }
     
    @Override
    public void keyReleased(KeyEvent e) {
        
  if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (platformX >= 1026) {
                platformX = 1026;
            } else {
                movePlatformRight();
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (platformX < 10) {
                platformX = 10;
            } else {
                movePlatformLeft();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
